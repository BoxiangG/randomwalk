#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <omp.h>
#include <algorithm>
#include <mpi.h>
#include "wtime.h"
#include "graph.h"
//#include "frontier_queue.h"
#include "scc_common.h"
//#include "trim_1.h"
#include "trim_1_gfq.h"
#include "trim_2_3.h"
#include "color_propagation.h"
#include "fw_bw.h"
#include "openmp_wcc.hpp"
#define INF -1

//0 trim, 1 largest SCC, 2 small SCC, 3 total time
//4 trim_size_1, 5 trim_size_2, 6 pivot_selection, 7 fw_bfs, 8 bw_bfs, 9 color propagation, 10 color identify, 11 color_init 

void scc_detection(
        const graph *g,
        const int alpha, 
        const int beta,
        const int gamma,
        const double theta,
        const index_t thread_count,
        double *avg_time,
        int world_rank,
        int world_size,
        int run_time
        )
{
    const index_t vert_count = g->vert_count;
    const index_t edge_count = g->edge_count;
    const double avg_degree = edge_count * 1.0 / vert_count;
    if(DEBUG)
        printf("vert_count = %d, edge_count = %d, avg_degree = %.3lf\n", vert_count, edge_count, avg_degree);
    //step 0: initialization
//    return;

    index_t *fw_beg_pos = g->fw_beg_pos;
    vertex_t *fw_csr = g->fw_csr;
    index_t *bw_beg_pos = g->bw_beg_pos;
    vertex_t *bw_csr = g->bw_csr;

    if(VERBOSE)
    {
        for(int i=fw_beg_pos[vert_count]; i<fw_beg_pos[vert_count+1]; ++i)
            printf("%d\n", fw_csr[i]);
    }

    index_t *scc_id = new index_t[vert_count + 1];
   
//    index_t *color = new index_t[vert_count + 1];
//    index_t *color_times = new index_t[vert_count + 1];

    index_t *max_pivot_list = new index_t[thread_count];
    index_t *max_degree_list = new index_t[thread_count];
    

//    index_t *mul_degree = new index_t[vert_count + 1];
//    index_t *degree_prop = new index_t[vert_count + 1];
	
    depth_t *fw_sa;
	depth_t *bw_sa;

//    fw_sa = new depth_t[vert_count+1];
//    bw_sa = new depth_t[vert_count+1];

	if(posix_memalign((void **)&fw_sa,getpagesize(),
		sizeof(depth_t)*(vert_count+1)))
		perror("posix_memalign");
	
    if(posix_memalign((void **)&bw_sa,getpagesize(),
		sizeof(depth_t)*(vert_count+1)))
		perror("posix_memalign");
    
//    index_t *displs = new index_t[vert_count];
//    index_t *recv_counts = new index_t[vert_count];

    index_t *small_queue = new index_t[vert_count + 1];
//    index_t *temp_queue = new index_t[vert_count + 1];
//    index_t *inter_queue = new index_t[vert_count + 1];
//    index_t *wcc_fq= new index_t[vert_count + 1];
    
    index_t *thread_bin = new index_t[thread_count];
//    index_t *prefix_sum = new index_t[thread_count];
	
    index_t *front_comm=new index_t[thread_count];	
	index_t *work_comm=new index_t[thread_count];
    bool *color_change = new bool[thread_count];
    memset(color_change, 0, sizeof(bool) * thread_count);

    //WCC + FW-BW

    vertex_t wcc_fq_size = 0;

//Initialization
    
//    if(DEBUG)
//    {
//        printf("Initialization\n");
//    }

//    #pragma omp parallel for
    for(index_t i=0; i<vert_count + 1; ++i)
    {
//        color[i] = i;
//            color_times[i] = 0;
        fw_sa[i] = -1;
        bw_sa[i] = -1;
        scc_id[i] = 0;
//            wcc_color[i] = -1;
//            color_redirect[i] = i;
    }

    //step 1: trim size-1
    //step 2: largest_scc, asynchronize, direction optimized
    //step 3: trim size-1 && size-2 && size-3
    /// generate new FQ
    //step 4: small sccs, graph coloring
    
//    if(DEBUG)
//    {
//        printf("Parallel starts\n");
//    }
    vertex_t vertex_fw = 0;
    vertex_t vertex_bw = 0;
    index_t size_3_1 = 0;
    index_t size_3_2 = 0;
    bool changed = false;
    double end_time;
    double start_time = wtime();
//    #pragma omp parallel \
//    num_threads(thread_count) 
//    \shared(global_color)
    {
        const index_t pid = world_rank;
        const index_t tid = pid;
        const index_t p_count = world_size;
        index_t step = vert_count / p_count;
        index_t vert_beg = pid * step;
        index_t vert_end = (pid == p_count - 1 ? vert_count : vert_beg + step);
//        const index_t tid = omp_get_thread_num();
//        index_t step = vert_count / thread_count;
//        index_t vert_beg = tid * step;
//        index_t vert_end = (tid == thread_count - 1 ? vert_count : vert_beg + step);
        double time_size_1_first;
        double time_size_1;
        double time_fw;
        double time_bw; 
        double time_size_2;
        double time_size_3;
        double time_gfq;
        double time_color_1;
        double time_color_2;
        double time_color;
        double pivot_time;
        double time_color_init;
        double time_wcc;
        double time_mice_fw_bw; 
        const vertex_t upper_bound = vert_count / thread_count * 5;
        vertex_t *thread_queue = new vertex_t[upper_bound];
        
//        displs[0] = 0; 
//        for(vertex_t i = 1; i < world_size; ++i)
//        {
//            displs[i] = displs[i - 1] + step;
//            recv_counts[i - 1] = step;
//        }
//        recv_counts[world_size - 1] = vert_end - displs[world_size - 1];
//
//        for(vertex_t i = 0; i < world_size; ++i)
//            printf("%d, %d\n", displs[i], recv_counts[i]);
//        
        double time = wtime();
// not using frontier queue for trim
//
        index_t trim_times = 1;

// change to control by trimmed vertices
        
//        trim_1_first(scc_id,
//                fw_beg_pos,
//                bw_beg_pos,
//                vert_beg,
//                vert_end);
        trim_1_first(scc_id,
                fw_beg_pos,
                bw_beg_pos,
                0,
                vert_count);

        
//            MPI_Allgather(&fw_sa[vert_beg],
//                step,
//                MPI_INT,
//                fw_sa,
//                step,
//                MPI_INT,
//                MPI_COMM_WORLD);
            
//            index_t simple_end = world_size * step;
//            if(vert_count != simple_end)
//            {
////                    printf("%d, %d\n", simple_end, vert_count);
//                MPI_Allreduce(MPI_IN_PLACE,
//                    &fw_sa[simple_end],
//                    vert_count - simple_end,
//                    MPI_INT,
//                    MPI_MAX,
//                    MPI_COMM_WORLD);
//            }
//        trim_times ++;
//        #pragma omp barrier
//        MPI_Allreduce(MPI_IN_PLACE,
//                scc_id,
//                vert_count,
//                MPI_INT,
//                MPI_MAX,
//                MPI_COMM_WORLD);
        if(pid == 0)
        {
            time_size_1_first = wtime() - time;
        }

        
        ///step 2: largest_scc, asynchronize, direction optimized
        ///step 2.1: pivot selection
        time = wtime();
        vertex_t root = pivot_selection(scc_id,
                        fw_beg_pos,
                        bw_beg_pos,
                        0,
                        vert_count,
                        fw_csr,
                        bw_csr,
                        max_pivot_list,
                        max_degree_list,
                        pid,
                        thread_count);

//        #pragma omp barrier

//        if(pid == 0)
//        {
//            time_size_1 = wtime() - time;
//        }
//        #pragma omp barrier
        pivot_time = wtime() - time;
        
//        index_t fq_size = gfq_origin(vert_count,
//                scc_id,
//                small_queue);
//                
//        step = fq_size / p_count;
//        vert_beg = pid * step;
//        vert_end = (pid == p_count - 1 ? fq_size : vert_beg + step);

        //step 2.2: fw bfs
        time = wtime();
        fw_bfs(scc_id,
                fw_beg_pos,
                bw_beg_pos,
                vert_beg,
                vert_end,
                fw_csr,
                bw_csr,
                fw_sa,
                front_comm,
                work_comm,
                root,
                tid,
                thread_count,
                alpha,
                beta,
                edge_count,
                vert_count,
                world_size,
                world_rank,
                step);
//        #pragma omp barrier
        time_fw = wtime() - time;

//        ///step 2.3: bw bfs 
        time = wtime();
        bw_bfs(scc_id,
                fw_beg_pos,
                bw_beg_pos,
                vert_beg,
                vert_end,
                fw_csr,
                bw_csr,
                fw_sa,
                bw_sa,
                front_comm,
                work_comm,
                root,
                tid,
                thread_count,
                alpha,
                beta,
                edge_count,
                vert_count,
                world_size,
                world_rank,
                step);
//        #pragma omp barrier
        time_bw = wtime() - time;

/*
//        trim_times = 0;

//        #pragma omp barrier
//        time_bw += wtime() - time;
//        delete[] thread_queue;
    
//
        //step 3: trim size-1 && size-2
        //step 3.1: trim size_1 && gfq
        
//        while(prev_fq_size > 0 && trim_times < TRIM_TIMES)
//        {
            time = wtime();
// Trim-1 normal
            trim_1_normal(scc_id,
                    fw_beg_pos,
                    bw_beg_pos,
                    vert_beg,
                    vert_end,
                    fw_csr,
                    bw_csr);

//            #pragma omp barrier
            
            if(tid == 0)
            {
                time_size_1 += wtime() - time;
            }

            time = wtime();
            //step 3.2: trim size_2
            trim_2_from_graph(scc_id,
                    fw_beg_pos,
                    bw_beg_pos,
                    vert_beg,
                    vert_end,
                    fw_csr,
                    bw_csr);
//            #pragma omp barrier
            if(tid == 0)
                time_size_2 = wtime() - time;
            
            
            
            //step 3.3: trim size-3
            //size-3: type_1, A --> B --> C --> A
            time = wtime();
            trim_3_1_from_graph(scc_id,
                    fw_beg_pos,
                    bw_beg_pos,
                    vert_beg,
                    vert_end,
                    fw_csr,
                    bw_csr);

//            #pragma omp barrier
            double time_size_3_1 = wtime() - time;

            if(DEBUG)
            {
                if(tid == 0)
                    printf("time_size_3_1, %.3lf\n", time_size_3_1 * 1000);
            }

            //step 3.3: trim size-3
            //size-3: type_1, A --> B --> A --> C --> A 
            //starting from hub vertex A
            
            time = wtime();
            trim_3_2_from_graph(scc_id,
                    fw_beg_pos,
                    bw_beg_pos,
                    vert_beg,
                    vert_end,
                    fw_csr,
                    bw_csr);
            
/// note!
//            time_size_1 = 0;
//            #pragma omp barrier
            double time_size_3_2 = wtime() - time;

            if(DEBUG)
            {
                if(tid == 0)
                    printf("time_size_3_2, %.3lf\n", time_size_3_2 * 1000);
            }
            time_size_3 = time_size_3_1 + time_size_3_2;
            
            
            //step 3.4: trim size_1
            time = wtime();
            trim_1_normal(scc_id,
                    fw_beg_pos,
                    bw_beg_pos,
                    vert_beg,
                    vert_end,
                    fw_csr,
                    bw_csr);
//            #pragma omp barrier
            time_size_1 += wtime() - time;

// try using WCC + FW-BW

            time = wtime();

//            generate_frontier_queue(vert_count,
//                    scc_id,
//                    thread_count,
//                    small_queue,
//                    thread_bin,
//                    prefix_sum,
//                    vert_beg,
//                    vert_end,
//                    tid);
//            #pragma omp barrier
//
//            index_t fq_size = prefix_sum[thread_count - 1] + thread_bin[thread_count - 1];
//            step = fq_size / thread_count;
//            vert_beg = tid * step;
//            vert_end = (tid == thread_count - 1 ? fq_size : vert_beg + step);
//
//// color WCC, with both FW & BW
//            coloring_wcc(fq_size,
//                    scc_id,
//                    thread_count,
//                    small_queue,
//                    vert_beg,
//                    vert_end,
//                    tid,
//                    color,
//                    color_change,
//                    fw_beg_pos,
//                    fw_csr,
//                    bw_beg_pos,
//                    bw_csr);
//            #pragma omp barrier
//            if(tid == 0)
//            {
//                time_wcc = wtime() - time;
//            }
//
//            time = wtime();
//// using fw-bw to detect mice SCCs
//            init_fw_sa(vert_beg,
//                    vert_end,
//                    fw_sa,
//                    small_queue,
//                    fq_size,
//                    wcc_fq,
//                    tid,
//                    color,
//                    wcc_fq_size);
//            #pragma omp barrier
//            if(DEBUG)
//            {
//                if(tid == 0)
//                {
//                    printf("wcc_fq, %d\n", wcc_fq_size);
//                }
//            }
////            if(tid == 0)
////            {
//            mice_fw_bw(color,
//                    scc_id,
//                    fw_beg_pos,
//                    bw_beg_pos,
//                    fw_csr,
//                    bw_csr,
//                    fw_sa,
//                    tid,
//                    thread_count,
//                    small_queue,
//                    fq_size,
//                    wcc_fq,
//                    wcc_fq_size
//                    ); 
////            }
//            #pragma omp barrier
//            if(tid == 0)
//            {
//                time_mice_fw_bw = wtime() - time;
////                printf("FW-BW mice (ms), %.3lf\n", time_mice_fw_bw * 1000);
//            }
//            
*/
        if(tid == 0 && run_time != 1)
        {
            avg_time[0] += time_size_1_first + time_size_1 + time_size_2 + time_size_3;
//            avg_time[0] += time_size_1;
            avg_time[1] += time_fw + time_bw;
            //avg_time[1] += time_fw + time_bw + pivot_time;
            avg_time[2] += time_wcc + time_mice_fw_bw;
            avg_time[4] += time_size_1_first + time_size_1;
//            avg_time[4] += time_size_1;
            avg_time[5] += time_size_2;
            avg_time[6] += pivot_time;
            avg_time[7] += time_fw;
            avg_time[8] += time_bw;
            avg_time[9] += time_wcc;
            avg_time[10] += time_mice_fw_bw;
//            avg_time[11] += time_color_init;
            
            avg_time[13] += time_size_3;
            avg_time[14] += time_gfq;
            
        }
        if(OUTPUT_TIME)
        {
            if(tid == 0)
            {
                printf("\ntime size_1_first, %.3lf\ntime size_1, %.3lf\ntime pivot, %.3lf\nlargest fw, %.3lf\nlargest bw, %.3lf\nlargest fw/bw, %.3lf\ntrim size_2, %.3lf\ntrim size_3, %.3lf\nwcc time, %.3lf\nmice fw-bw time, %.3lf\nmice scc time, %.3lf\ntotal time, %.3lf\n", time_size_1_first * 1000, time_size_1 * 1000, pivot_time * 1000, time_fw * 1000, time_bw * 1000, (pivot_time + time_fw + time_bw) * 1000, time_size_2 * 1000, time_size_3 * 1000, time_wcc * 1000, time_mice_fw_bw * 1000, (time_wcc + time_mice_fw_bw) * 1000, (time_size_1_first + time_size_1 + pivot_time + time_fw + time_bw + time_size_2 + time_size_3 + time_wcc + time_mice_fw_bw) * 1000);
            }
        }
        #pragma omp barrier
    }
    end_time = wtime() - start_time;
    avg_time[3] += end_time;
    if(DEBUG)
        printf("total time, %.3lf\n", end_time * 1000);

    get_scc_result(scc_id,
            vert_count);

    delete[] scc_id;
//    delete[] color;
    delete[] max_pivot_list;
    delete[] max_degree_list;
//    delete[] small_queue;
//    delete[] temp_queue;
    delete[] thread_bin;
//    delete[] prefix_sum;
    delete[] front_comm;
	delete[] work_comm;
    delete[] color_change;
//    delete[] wcc_color;
//    delete[] color_redirect;
//    delete[] is_redirect;

}


